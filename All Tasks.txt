-1-

#	Araştırma Konuları
1	Git nedir? En çok kullanılan versiyonları nelerdir? Microsoft ve Git arasında ne ilişki var, MS neden bu alana yatırım yapmış olabilir?
2	Semantic Web nedir? Kullanım alanları nelerdir, ne amaçla böyle bir yöntem üzerine düşünülmüştür?
3	HTTP ve HTTPS arasındaki fark nedir? Bir sertifikanın geçerli ya da geçersiz olduğunu nasıl anlarız? Sertifika nasıl üretilir?
4	DNS nedir? TCP ve UDP arasında ne fark var? Bu ikisi haricinde google'ın vakti ile üzerinde çalıştığı protokol neydi? Neden vazgeçtiler?
5	React, Angular ve Vue gibi frameworkler neden geliştirilmiş, ne işe yarıyorlar?
6	Windows'ta ve Linux'ta bir dosya için maximum character limit nedir? Absolute path ne demektir? Absolute path limiti bu OS'lar için nedir?
7	CI/CD nedir? Ne işe yarar?
8	Graylog ne işe yarar? Regex nedir? Bir text bloğu içerisinde satır başlı B3st3 ile başlayan kelimeyi regex'te nasıl yazıp buluruz? (regex101'i deneme için kullanabilirsin ya da notepad++)
9	Yazılım Testi nedir? Hangi süreçler uygulanır? Test tipleri nelerdir? Otomasyon ne demektir, hangi durumlarda kullanılması daha uygundur?
10	dos, powershell, bash, shell script nedir?
11	Defect Density ne demektir? Neden böyle bir ölçüme ihtiyaç duyarız?
12	Fonskiyonel veya fonksiyonel olmayan test neyi ifade eder?
13	Bir test case’in priority’sini neye göre belirleriz? Test case severity nedir ve priorty nasıl etkiler?
14	Stres testi ne demektir? Performans ve Load testi hangi durumlarda gerçekleştirilir, aralarındaki farklar nelerdir?
15	Scrum nedir? Neden ilgi gören bir methodolojiye dönüştü?
16	Microservice nedir? Servis ve Mikroservis arasında ne gibi bir fark var?
17	Rest ve Soap nedir? Aralarındaki farklar nelerdir? Dezavantajları ve avantajları nelerdir? Sadece bu ikisi mi mevcuttur alternatifleri var mıdır?

-2-

1.	İşlem yapacağın path “/home/intern/{employeeId}” şeklinde olsun. Eğer hali hazırda bu klasörler yoksa oluşturalım.
2.	Nerede  olduğumuzu teyit etmek için bulunduğumuz dizini ekrana yazdıralım.
3.	“Test” isimli bi klasör oluşturalım ve izinlerini herkesin erişebileceği  şekle dönüştürelim lakin bunu hangi komutla yapıyoruz ve bu komutu kullanmaya iznimiz var mı?
4.	Daha sonra bu oluşturduğumuz klasöre girip burda bi dosya oluşturalım.
5.	Oluşturduğumuz dosyayı bir text editor ile açıp ismimizi yazalım ve kaydedelim.
6.	Bu dosyanın içine şu anki tarihi, dizini, oluşturma tarihini ve boyutunu ve kullanıcıyı yazdıralım. 
7.	Dosyanın içeriğini bir text editor kullanmadan komut satırında görebilir miyiz? Öyleyse hangi komutla görebiliriz?
8.	Dosyayı bir üst dizine kopyalayalım.
9.	Kopyaladığımız dosyayı silelim.
10.	“Test” klasörü içindeki dosyayı tar’layarak küçültelim.
11.	Tarlı ve tarsız boyutlarını karşılaştıralım.
12.	Dosyayı tardan çıkaralım
13.	Klasör içeriğini ls –a ile listeleyelim “-a” nedir ve ne anlama geliyor araştıralım.
14.	Diskte ne kadar yer kaldığını görünteleyelim
15.	Memory ve cpu kullanımını görüntüleyelim.
16.	Nohup nedir? Nerde işimize yarayabilir? Memory ve Cpu kullanımı üzerinde kullanılabilir mi? 
17.	Shell Script nedir? Nasıl ve ne için kullanırız?
18.	2’den 16. Adıma kadar olan kısımları otomize edebilir miyiz? Edebilirsek bunu yapalım.

-3-

TIE

-4-

Şimdi selenium kullanarak tablo için bir performans testi yapalım ve raporunu oluşturalim. 

-5-

Son task olarak daha önce yüklediğimiz tie’in api’larını jmeter ya da postman ile kontrol edelim. Bunun için iki farklı yöntem deneyebilirsin; 

1.Hatırladığım kadarıyla api dökümantasyonu için “Swagger” kullanmaktaydı ve swagger’ın kendi arayüzünü kullanarak api’ları kontrol edebiliriz. Swagger bu arayüzü doldurmak için, bütün api endpointlerin bilgisini içeren bir json dosyası kullanıyor. Bu JSON’a “chrome developer tools”u kullanarak erişebilir, indirebilir ve postman’a import edebilirsin.

2.Jmeter, bütünleşik proxy’si sayesinde  giden istekleri dinleyebiliyor ve kaydedebiliyor, bu fonksiyon aynı zamanda postman’de de mevcut. Jmeter’da bunu yapmak için sistem proxy’sini geçici olarak değiştirip kaydı başlatmalı ve tarayıcı aracılığıyla istekleri yollamalısın. Proxy’nin sorun çıkarmaması için “Proxy SwitchyOmega” gibi bir chrome eklentisi de kullanabilirsin.

Bu iki yöntemden birini kullanarak tie’ın api endpoint’lerini öğrenebilir daha sonra bunların işlevselliğini kontrol edebilirsin. Tabii dilersen chrome developer tools’u kullanarak istekleri inceleyebilir manual olarak da oluşturabilirsin. 

Bu api’ları kullanarak bir text dosyası yükleyelim ve bu dosyadan extraction alalım ve kullandığın tool’ları da açıklayan bir rapor oluşturalım. Daha önceki taskında kullandığın modeli ve text’i kullanabilirsin. 
